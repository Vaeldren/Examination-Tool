@page "/test/inputquestion/{formLength:int}"
@inject HttpClient Http
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "Administrators, Teachers")]
@using System.Security.Claims

<h4>Create a test</h4>
<br />
<EditForm Model="Exam" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="form-check group">
        <label class="control-label">Exam name</label>
        <InputText @bind-Value="@Exam.ExamName" class="form-control" />
        <ValidationMessage For="@(() => Exam.ExamName)" />
    </div>
    <br />
    <div class="form-check group">
        <label class="control-label">Exam code: @Exam.ExamCode</label>
    </div>
    <br />
    @foreach (var quest in questionList)
    {

        <div class="form-check group">
            <label class="control-label">Question</label>
            <InputText @bind-Value="@quest.Text" class="form-control" />
            <ValidationMessage For="@(() => quest.Text)" />
            <br />
            <label class="control-label">Mark</label>
            <InputNumber @bind-Value="@quest.Mark" class="form-control" />
            <br />
        </div>
        <br />
        <br />
    }
    <button type="submit" class="btn btn-primary">
        <i class="fas fa-save"></i> Submit
    </button>
    <br />
</EditForm>

@code {
    private Exam Exam = new Exam();
    private List<Question> questionList = new List<Question>();
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    [Parameter] public int formLength { get; set; }


    protected override async Task OnInitializedAsync()
    {

        Random code = new Random();


        //Exam.TeacherId = aState.User.Identity.GetUserId());
        Exam.ExamCode = code.Next(1000000, 9999999);
        for (int i = 0; i < formLength; i++)
        {

            Question Question = new Question();
            Question.QuestionId = Guid.NewGuid();
            Question.ExamId = Exam.ExamId;
            questionList.Add(Question);
        }
    }

    private async void HandleValidSubmit()
    {
        try
        {
            //stuff everything into exam and then post it
            Exam.QuestionAmount = questionList.Count();

            var response = await Http.PostAsJsonAsync("/api/Exams", Exam);
            response.EnsureSuccessStatusCode();
            var content = await response.Content.ReadAsStringAsync();
            var project = JsonConvert.DeserializeObject<Exam>(content);
            foreach (var quest in questionList)
            {
                var response1 = await Http.PostAsJsonAsync($"/api/Questions", quest);
                response1.EnsureSuccessStatusCode();
@*                var content1 = await response1.Content.ReadAsStringAsync();
                var project1 = JsonConvert.DeserializeObject<Question>(content1);*@

            }
            Navigation.NavigateTo("/test/createtest");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception e)
        {

        }


    }

}
