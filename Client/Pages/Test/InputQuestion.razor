@page "/inputquestion/{formLength:int}"
@inject HttpClient Http
@inject NavigationManager Navigation
@attribute [Authorize]

<h4>Create a test</h4>
<br />
<EditForm Model="Exam" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="form-check group">
        <label class="control-label">Exam name</label>
        <InputText @bind-Value="Exam.ExamName" class="form-control" />
        <ValidationMessage For="@(() => Exam.ExamName)" />
    </div>
    <br />
    <div class="form-check group">
        <label class="control-label">Exam creator</label>
        <select @bind="Exam.TeacherId" class="form-control">
            <option value=""></option>
            @foreach (var teach in teachers)
            {
                <option value="@teach.TeacherId">@teach.FirstName @teach.LastName</option>
            }
        </select>
        <ValidationMessage For="@(() => Exam.TeacherId)" />
    </div>
    <br />
    <br />
    @foreach (var quest in questionList)
    {
        <div class="form-check group">
            <label class="control-label">Question</label>
            <InputText @bind-Value="quest.Text" class="form-control" />
            <ValidationMessage For="@(() => quest.Text)" />
            <br />
            <label class="control-label">Input Type:</label>
            <select class="control-label" @bind="quest.Type">
                <option value="text">Text</option>
                <option value="image">Image</option>
            </select>
            <ValidationMessage For="@(() => quest.Type)" />
            <br />
            <br />
            <label class="control-label">Mark</label>
            <InputNumber @bind-Value="quest.Mark" class="form-control" />
            <br />
        </div>
        <br />
        <br />
    }
    <button type="submit" class="btn btn-primary">
        <i class="fas fa-save"></i> Submit
    </button>
    <br />
</EditForm>

@code {
    private Exam Exam { get; set; } = new Exam();
    private List<Question> questionList = new List<Question>();
    private List<Teacher> teachers = new List<Teacher>();
    [Parameter] public int formLength { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            Random code = new Random();
            Exam.ExamCode = code.Next(1000, 9999);
            teachers = await Http.GetFromJsonAsync<List<Teacher>>("/api/Teachers");
            for(int i = 0; i < formLength; i++)
            {
                Question Question = new Question();
                Question.ExamId = Exam.ExamId;
                questionList.Add(Question);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception e)
        {

        }
    }

    private async void HandleValidSubmit()
    {
        try
        {
            //stuff everything into exam and then post it
            Exam.ExamQuestions = questionList;
            var response = await Http.PostAsJsonAsync($"/api/Exams", Exam);
            response.EnsureSuccessStatusCode();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception e)
        {

        }


    }

}
