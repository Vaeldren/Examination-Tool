@page "/createtest"
@inject HttpClient Http
@inject NavigationManager Navigation
@attribute [Authorize]

<h3>Test Exam</h3>

<form OnValidSubmit="CreateField">

    <div class="form-check group">
        <label class="control-label">Number of questions:</label>
        <InputNumber @bind-Value="formLength" class="form-control" />
    </div>

    <p></p>
    <button type="submit" class="btn btn-primary">
        <i class="fas fa-save"></i> Submit
    </button>
</form>

@if (IsFormVisible)
{
   Question Question = new Question();
<EditForm Model=@Question OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        @for (int i = 0; i <= formLength; i++)
        {
            <div class="form-check group">
                <label class="control-label">Question @i</label>
                <InputText @bind-Value="questionName[i]" class="form-control" />

                <label class="control-label">Input Type:</label>
                <select class="control-label" @bind="questionType[i]">
                    <option value="text">Text</option>
                    <option value="image">Image</option>
                </select>
            </div>
            <p></p>
        }
        <button type="submit" class="btn btn-primary">
            <i class="fas fa-save"></i> Submit
        </button>
    </EditForm>
}

@code {
    private Exam Exam = new Exam();
    private Question[] QuestionArray;
    private int formLength = 0;
    private string[] questionName;
    private string[] questionType;
    bool IsFormVisible = false;

    private async void HandleValidSubmit()
    {
        try
        {
            Navigation.NavigateTo("/result");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception e)
        {

        }

    }

    private async void CreateField()
    {
        IsFormVisible = true;
        StateHasChanged();
    }
}
